Highlight JavaScript according to function scope        *JSContextColor*

  * .   _______*______ .  *   .   __   .   *    __  ______  .   __   * .   .
.      / / ___// ____/___  ____  / /____  _  __/ /_/ ____/___  / /___  _____
  _ * / /\__ \/ /   / __ \/ __ \/ __/ _ \| |/_/ __/ /   / __ \/ / __ \/ ___/
 / /_/ /___/ / /___/ /_/ / / / / /_/  __/>  </ /_/ /___/ /_/ / / /_/ / /  * 
 \____//____/\____/\____/_/ /_/\__/\___/_/|_|\__/\____/\____/_/\____/_/_/ .   
      *           .              *     .               .          *       . 
    .      *               .               .    *   David Wilhelm <dewilhelm@gmail.com>

==============================================================================
Commands

                                                        *:JSContextColor*
:JSContextColor        	     Colorize current buffer

                                                        *:JSContextColorToggle*
:JSContextColorToggle        Toggle whether the plugin is enabled

                                                        *:JSContextColorUpdate*
:JSContextColorUpdate        Update the color highlighting

==============================================================================
Options

                                                *g:js_context_colors_enabled*

Whether highlighting is done automatically when .js files are loaded/changed.
>
        let g:js_context_colors_enabled = 0
<

Note that commands above still work even when this is set to 0. If you enable
the *g:js_context_colors_usemaps* option below, you can trigger them more easily.

                                                *g:js_context_colors*

A list of custom colors to use for nested scope levels in JavaScript code, eg:

>
	let g:js_context_colors = [ 252, 10, 11, 172, 1, 161, 63 ]

The first color is the first level (global), the second is level 2 (top level
functions), the third is functions inside top-level functions...etc. The only 
values currently supported are terminal color numbers.

NB: Ensure that your terminal supports 256 colors before using colors
outside the default 16 terminal colors (0 - 15). Eg. these are the defaults
on Ubuntu (Xterm):

0:black, 1:red, 2:green, 3:yellow, 4:blue, 5:magenta, 6:cyan, 7:light gray

The colors 8-15 are 'bold' versions of the above:

8:dark gray, 9:bright red, 10:bright green, 11: bright yellow, 12: bright blue,
13: bright magenta, 14:bright cyan, 15:white

See the XtermColorTable plugin to see the 256 color range.

The default colors are 1:white, 2:green, 3: yellow 4:blue, 5:red, 6:cyan, 7:grey. You may add 
additional levels if you wish. 

                                                *g:js_context_colors_debug*

If set to 1, this enables debug output. 


                                                *g:js_context_colors_colorize_comments*

Whether to colorize comments according to the scope color -- default is false.
If you want this behaviour, set the option to 1:

>
	let g:js_context_colors_colorize_comments = 1
<

                                                *g:js_context_colors_comment_higroup*

A highlight group to use for comments (default is grey)

>
	highlight MyComment ctermfg=red

	let g:js_context_colors_comment_higroup = 'MyComment'
<

Or to use the comment syntax highlighting from your colorscheme:

>
	let g:js_context_colors_comment_higroup = 'Comment'
<

This will only take effect if the `g:js_context_colors_colorize_comments` option
is not set to 1.

                                                *g:js_context_colors_usemaps*

Disables maps (see below) when set to 0:

>
	let g:js_context_colors_usemaps = 0
<

==============================================================================
Mapping

By default, <localleader>h is mapped to the JSContextColor command.
By default, <localleader>t is mapped to the JSContextColorToggle command.

These can be changed by setting your own maps to the commands. This will
remove the above mappings.

 vim:tw=78:sw=8:ts=8:sts=8:noet:ft=help:norl:
