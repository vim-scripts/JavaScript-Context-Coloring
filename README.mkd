#Vim JavaScript Context Coloring

##Description

This is a plugin for the Vim text editor to highlight JavaScript code 
according to its scope. This was inspired by an idea by Douglas Crockford
in his [presentation](http://www.youtube.com/watch?v=dkZFtimgAcM) at YUIConf 2012.
(See from around the 16 minute mark onwards.) 

##Other implementations
See [this discussion on Google Plus](https://plus.google.com/118095276221607585885/posts/FzKnHk96m2C)
for information on other implementations.

##Usage

When the `JSContextColor` command is executed, the current buffer is colorized
according to the scope of the code. By default this will happen when a JavaScript
file is loaded, and whenever the file is changed. If you disable the plugin (see below),
you could arrange to call the `JSContextColor` command in response to a keymap of
your choice. Here is a summary of the commands available:

##Commands

    JSContextColor
    JSContextColorToggle
    JSContextColorUpdate

##Global Variables

    g:js_context_colors_enabled
    g:js_context_colors
    g:js_context_colors_usemaps
    g:js_context_colors_colorize_comments
    g:js_context_colors_comment_higroup

##Requirements

The plugin relies on [NodeJS](http://nodejs.org/) being installed, preferably > 0.10.

The command line script which runs jslint in Node to obtain the coloring data 
requires a Unix-like environment to work. This means it's probably not going to work
on Windows, unless inside Cygwin or something like that. 

##Installation

### Using Pathogen.

0. Install [Pathogen](https://github.com/tpope/vim-pathogen)

1. Clone the repo from GitHub into your 'bundle' directory:

    git clone git@github.com:bigfish/vim-js-context-coloring.git

2. Run this command in the repo dir to install required node modules:

    npm install

3. Install docs (in Vim):

    :Helptags

##Configuration

By default the plugin is enabled for all .js files. The highlighting will be applied
whenever a change is made to the text, whether in Normal or Insert mode. Note that it
will only be done *after* Insert mode is exited (back to Normal mode) so it will not 
update as you type.

###Colors

To change the colors used, set the `g:js_context_colors` variable to a list of colors, eg:

	let g:js_context_colors = [ 252, 10, 11, 172, 1, 161, 63 ]

Note that the color changes will not take effect immediately. To update the colors, you
can use the `JSContextColorUpdate` command.

Currently, only terminal colors are supported. Use the [XtermColorTable](http://www.vim.org/scripts/script.php?script_id=3412) plugin to see what colors are available
I intened to add support for Gvim/MacVim in a future version. 

###Comments

By default, comments are not colorized, but set to a middle grey color. If
you want to colorize comments as well, do this:

	let g:js_context_colors_colorize_comments = 1

If you want to use a custom highlight group for comments, define the group,
and then assign it to the `g:js_context_colors_comment_higroup`, eg:

	highlight MyComment ctermfg=red
	let g:js_context_colors_comment_higroup = 'MyComment'

Or to use the comment syntax highlighting from your colorscheme:

	let g:js_context_colors_comment_higroup = 'Comment'

This will only take effect if the `g:js_context_colors_colorize_comments` option
is not set to 1.

###Disabling

The plugin is enabled by default. To disable it, set the `g:js_context_colors_enabled` variable
to 0, in your .vimrc file.

###Mappings

By default, <localleader>h is mapped to the `JSContextColor` command.
By default, <localleader>t is mapped to the `JSContextColorToggle` command.

These are local to the buffer. They can be disabled by setting the `g:js_context_colors_usemaps` variable to 0.

##License

MIT -- see LICENSE file
